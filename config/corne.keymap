/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    combos {
        compatible = "zmk,combos";

        j {
            bindings = <&kp J>;
            key-positions = <14 15>;
        };

        b {
            bindings = <&kp B>;
            key-positions = <15 16>;
        };

        p {
            bindings = <&kp P>;
            key-positions = <19 20>;
        };

        v {
            bindings = <&kp V>;
            key-positions = <20 21>;
        };

        shift_j {
            bindings = <&kp LS(J)>;
            key-positions = <14 15>;
            layers = <5>;
            require-prior-idle-ms = <1>;
        };

        shift_b {
            bindings = <&kp LS(B)>;
            key-positions = <15 16>;
            layers = <5>;
            require-prior-idle-ms = <1>;
        };

        shift_p {
            bindings = <&kp LS(P)>;
            key-positions = <19 20>;
            layers = <5>;
            require-prior-idle-ms = <1>;
        };

        shift_v {
            bindings = <&kp LS(V)>;
            key-positions = <20 21>;
            layers = <5>;
            require-prior-idle-ms = <1>;
        };
    };

    macros {
        qu: qu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Q &kp U>;
            label = "QU";
        };

        copy: copy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(C)>;
            label = "COPY";
        };

        paste: cut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(V)>;
            label = "CUT";
        };

        select_all: select_all {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(A)>;
            label = "SELECT_ALL";
        };

        undo: undo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(Z)>;
            label = "UNDO";
        };

        shiftq: shiftq {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(Q) &kp U>;
            label = "SHIFTQ";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        main_layer {
            bindings = <
&trans  &trans                 &kp Y         &kp L               &kp LS(UNDER)    &kp SEMI     &kp B        &kp P    &kp D    &mt LEFT_CONTROL C  &trans  &trans
&trans  &mt LEFT_SHIFT R       &kp I         &lt 3 N             &lt 2 A          &kp COMMA    &kp F        &sl 1    &kp T    &kp S               &kp U   &trans
&trans  &mt LEFT_SHIFT PERIOD  &kp LS(LPAR)  &mt LEFT_CONTROL M  &kp O            &kp EQUAL    &kp V        &kp H    &kp G    &kp LS(RPAR)        &kp W   &trans
                                             &kp LGUI            &lt 6 BACKSPACE  &lt 5 E      &lt 4 SPACE  &kp RET  &kp TAB
            >;
        };

        secondary_layer {
            bindings = <
&trans  &trans       &kp LS(PLUS)  &mt LS(X) X    &kp LS(STAR)   &kp CARET        &trans  &trans   &mt LS(K) K  &qu                &trans        &trans
&trans  &kp LS(AT)   &kp LS(LT)    &kp MINUS      &kp LS(GT)     &kp LS(EXCL)     &trans  &kp ESC  &kp SQT      &kp DOUBLE_QUOTES  &mt LS(Z) Z   &trans
&trans  &mt LS(J) J  &kp LS(AMPS)  &kp LBKT       &kp RBKT       &kp LS(POUND)    &trans  &trans   &kp BSLH     &kp FSLH           &kp LS(PIPE)  &trans
                                   &kp LS(PRCNT)  &kp LS(COLON)  &mt LS(Q) Q      &trans  &shiftq  &trans
            >;
        };

        num_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp N7  &kp N8  &kp N9  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp N1  &kp N2  &kp N3  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp N4  &kp N5  &kp N6  &trans  &trans
                        &trans  &trans  &trans    &kp N0  &trans  &trans
            >;
        };

        F_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &kp F12  &kp F7  &kp F8  &kp F9  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp F11  &kp F1  &kp F2  &kp F3  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp F10  &kp F4  &kp F5  &kp F6  &trans  &trans
                        &trans  &trans  &trans    &trans   &trans  &trans
            >;
        };

        navigation_layer {
            bindings = <
&trans  &trans  &trans          &mmv MOVE_UP    &trans           &trans       &trans    &trans    &trans  &trans     &trans  &trans
&trans  &trans  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans       &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans  &trans
&trans  &trans  &trans          &trans          &trans           &trans       &trans    &trans    &trans  &trans     &trans  &trans
                                &trans          &mkp RCLK        &mkp LCLK    &trans    &trans    &trans
            >;
        };

        shift_layer {
            bindings = <
&trans  &trans     &kp LS(Y)     &kp LS(L)  &kp LS(DLLR)  &kp SEMI         &kp LS(B)  &kp LS(P)  &kp LS(D)  &kp LS(C)     &trans     &trans
&trans  &kp LS(R)  &kp LS(I)     &kp LS(N)  &kp LS(A)     &kp GRAVE        &kp LS(F)  &mo 1      &kp LS(T)  &kp LS(S)     &kp LS(U)  &trans
&trans  &trans     &kp LS(LBRC)  &kp LS(M)  &kp LS(O)     &kp LS(QMARK)    &kp LS(V)  &kp LS(H)  &kp LS(G)  &kp LS(RBRC)  &kp LS(W)  &trans
                                 &trans     &trans        &trans           &trans     &kp LS(E)  &trans
            >;
        };

        delete_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans    &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp BSPC  &kp BSPC  &kp BSPC  &kp BSPC  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans    &trans    &trans    &trans    &trans
                        &trans  &trans  &trans    &trans  &kp DEL   &trans
            >;
        };

        shortcuts_layer {
            bindings = <
&trans  &trans  &trans       &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &select_all  &copy   &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans       &paste  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                             &trans  &undo   &trans    &trans  &trans  &trans
            >;
        };
    };
};
